{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Simple YouTube Age Restriction Bypass","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.youtube.com/*","https://www.youtube-nocookie.com/*","https://m.youtube.com/*","https://music.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null},"user_modified":null},"storage":{"ts":1690579539894,"data":{}},"enabled":true,"position":1,"file_url":"https://github.com/zerodytrash/Simple-YouTube-Age-Restriction-Bypass/raw/main/dist/Simple-YouTube-Age-Restriction-Bypass.user.js","uuid":"163ac3a9-2569-42c4-ba78-9b0b4bab3293","source":""}]}